[0m[[0m[0mdebug[0m] [0m[0m> Exec(~run, Some(8ed69432-2078-4def-b65f-9766bdff2c4e), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__runWatch console0, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(sbtStashOnFailure, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__preWatch console0, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(run, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / run[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to C:\Users\leifr\Desktop\Project1Ex\target\scala-2.11\classes ...[0m
[0m[[0m[33mwarn[0m] [0m[0mthere were 21 deprecation warnings; re-run with -deprecation for details[0m
[0m[[0m[33mwarn[0m] [0m[0mone warning found[0m
[0m[[0m[31merror[0m] [0m[0morg.apache.spark.sql.catalyst.parser.ParseException: [0m
[0m[[0m[31merror[0m] [0m[0mDataType name is not supported.(line 1, pos 315)[0m
[0m[[0m[31merror[0m] [0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m== SQL ==[0m
[0m[[0m[31merror[0m] [0m[0mCREATE TABLE IF NOT EXISTS data1 (Artist_Name STRING, Track_Name STRING, Popularity INT, Danceability FLOAT, Energy FLOAT, Key INT, Loudness FLOAT, Mode INT, Speechiness FLOAT, Acousticness FLOAT, Instrumental FLOAT, Liveness FLOAT, Valence FLOAT, Tempo FLOAT, Duration FLOAT, Time_Sign INT) PARTITIONED BY (Artist Name) CLUSTERED BY (Popularity) INTO 4 BUCKETS row format delimited fields terminated by ',' stored as textfile TBLPROPERTIES("skip.header.line.count"="1")[0m
[0m[[0m[31merror[0m] [0m[0m---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^^^[0m
[0m[[0m[31merror[0m] [0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitPrimitiveDataType$1.apply(AstBuilder.scala:1673)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitPrimitiveDataType$1.apply(AstBuilder.scala:1651)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.ParserUtils$.withOrigin(ParserUtils.scala:108)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder.visitPrimitiveDataType(AstBuilder.scala:1651)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder.visitPrimitiveDataType(AstBuilder.scala:49)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.SqlBaseParser$PrimitiveDataTypeContext.accept(SqlBaseParser.java:13779)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder.typedVisit(AstBuilder.scala:55)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitColType$1.apply(AstBuilder.scala:1717)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitColType$1.apply(AstBuilder.scala:1708)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.ParserUtils$.withOrigin(ParserUtils.scala:108)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder.visitColType(AstBuilder.scala:1708)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitColTypeList$1$$anonfun$apply$38.apply(AstBuilder.scala:1702)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitColTypeList$1$$anonfun$apply$38.apply(AstBuilder.scala:1702)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.Iterator$class.foreach(Iterator.scala:891)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.AbstractIterator.foreach(Iterator.scala:1334)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.IterableLike$class.foreach(IterableLike.scala:72)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.AbstractIterable.foreach(Iterable.scala:54)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.collection.AbstractTraversable.map(Traversable.scala:104)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitColTypeList$1.apply(AstBuilder.scala:1702)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitColTypeList$1.apply(AstBuilder.scala:1702)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.ParserUtils$.withOrigin(ParserUtils.scala:108)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder.visitColTypeList(AstBuilder.scala:1701)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.SparkSqlAstBuilder$$anonfun$visitCreateHiveTable$1$$anonfun$28.apply(SparkSqlParser.scala:1134)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.SparkSqlAstBuilder$$anonfun$visitCreateHiveTable$1$$anonfun$28.apply(SparkSqlParser.scala:1134)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.Option.map(Option.scala:146)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.SparkSqlAstBuilder$$anonfun$visitCreateHiveTable$1.apply(SparkSqlParser.scala:1134)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.SparkSqlAstBuilder$$anonfun$visitCreateHiveTable$1.apply(SparkSqlParser.scala:1113)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.ParserUtils$.withOrigin(ParserUtils.scala:108)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.SparkSqlAstBuilder.visitCreateHiveTable(SparkSqlParser.scala:1113)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.SparkSqlAstBuilder.visitCreateHiveTable(SparkSqlParser.scala:55)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.SqlBaseParser$CreateHiveTableContext.accept(SqlBaseParser.java:1206)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visit(AbstractParseTreeVisitor.java:18)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitSingleStatement$1.apply(AstBuilder.scala:72)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder$$anonfun$visitSingleStatement$1.apply(AstBuilder.scala:72)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.ParserUtils$.withOrigin(ParserUtils.scala:108)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AstBuilder.visitSingleStatement(AstBuilder.scala:71)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AbstractSqlParser$$anonfun$parsePlan$1.apply(ParseDriver.scala:70)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AbstractSqlParser$$anonfun$parsePlan$1.apply(ParseDriver.scala:69)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parse(ParseDriver.scala:98)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.execution.SparkSqlParser.parse(SparkSqlParser.scala:48)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.catalyst.parser.AbstractSqlParser.parsePlan(ParseDriver.scala:69)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:642)[0m
[0m[[0m[31merror[0m] [0m[0m	at org.apache.spark.sql.SQLContext.sql(SQLContext.scala:694)[0m
[0m[[0m[31merror[0m] [0m[0m	at Project1Ex$.insertMusicData(Project1Ex.scala:435)[0m
[0m[[0m[31merror[0m] [0m[0m	at Project1Ex$.main(Project1Ex.scala:56)[0m
[0m[[0m[31merror[0m] [0m[0m	at Project1Ex.main(Project1Ex.scala)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.lang.reflect.Method.invoke(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.invokeMain(Run.scala:143)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.execute$1(Run.scala:93)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.$anonfun$runWithLoader$5(Run.scala:120)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run$.executeSuccess(Run.scala:186)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Run.runWithLoader(Run.scala:120)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Defaults$.$anonfun$bgRunTask$6(Defaults.scala:1983)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.Defaults$.$anonfun$termWrapper$2(Defaults.scala:1922)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)[0m
[0m[[0m[31merror[0m] [0m[0m	at scala.util.Try$.apply(Try.scala:213)[0m
[0m[[0m[31merror[0m] [0m[0m	at sbt.internal.BackgroundThreadPool$BackgroundRunnable.run(DefaultBackgroundJobService.scala:369)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m	at java.lang.Thread.run(Unknown Source)[0m
[0m[[0m[31merror[0m] [0m[0m(Compile / [31mrun[0m) org.apache.spark.sql.catalyst.parser.ParseException: [0m
[0m[[0m[31merror[0m] [0m[0mDataType name is not supported.(line 1, pos 315)[0m
[0m[[0m[31merror[0m] [0m[0m[0m
[0m[[0m[31merror[0m] [0m[0m== SQL ==[0m
[0m[[0m[31merror[0m] [0m[0mCREATE TABLE IF NOT EXISTS data1 (Artist_Name STRING, Track_Name STRING, Popularity INT, Danceability FLOAT, Energy FLOAT, Key INT, Loudness FLOAT, Mode INT, Speechiness FLOAT, Acousticness FLOAT, Instrumental FLOAT, Liveness FLOAT, Valence FLOAT, Tempo FLOAT, Duration FLOAT, Time_Sign INT) PARTITIONED BY (Artist Name) CLUSTERED BY (Popularity) INTO 4 BUCKETS row format delimited fields terminated by ',' stored as textfile TBLPROPERTIES("skip.header.line.count"="1")[0m
[0m[[0m[31merror[0m] [0m[0m---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^^^[0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 132 s (02:12), completed Feb 1, 2022 3:28:11 AM[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(resumeFromFailure, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(sbtPopOnFailure, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__postWatch console0, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__waitWatch console0, None, Some(CommandSource(console0)))[0m
